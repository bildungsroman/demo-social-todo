AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Resources:
  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      DefinitionBody:
        openapi: '3.0'
        info:
          title: !Sub ${AWS::StackName}-HttpApi
        paths:
          /items/{itemId}:
            get:
              responses: {}
            post:
              responses: {}
            put:
              responses: {}
            delete:
              responses: {}
          /items:
            get:
              responses: {}
        x-amazon-apigateway-cors:
          allowHeaders:
            - Authorization
            - Content-Type
          allowMethods:
            - '*'
          maxAge: 86400
      Auth:
        DefaultAuthorizer: MyAuthorizer
        Authorizers:
          MyAuthorizer:
            IdentitySource: $request.header.Authorization
            JwtConfiguration:
              audience:
                - !Ref UserPoolClient
              issuer: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      AliasAttributes:
        - email
        - preferred_username
      UserPoolName: !Sub ${AWS::StackName}-UserPool
  getItem:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-getItem
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: getItem
      CodeUri: src/getItem
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref Items
      Events:
        HttpApiGETitemsitemId:
          Type: HttpApi
          Properties:
            Path: /items/{itemId}
            Method: GET
            ApiId: !Ref HttpApi
            PayloadFormatVersion: '2.0'
      Environment:
        Variables:
          TABLE_NAME: !Ref Items
          TABLE_ARN: !GetAtt Items.Arn
  listItems:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-listItems
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: listItems
      CodeUri: src/listItems
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref Items
      Events:
        HttpApiGETitems:
          Type: HttpApi
          Properties:
            Path: /items
            Method: GET
            ApiId: !Ref HttpApi
            PayloadFormatVersion: '2.0'
      Environment:
        Variables:
          TABLE_NAME: !Ref Items
          TABLE_ARN: !GetAtt Items.Arn
  newItem:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-newItem
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: newItem
      CodeUri: src/newItem
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref Items
      Events:
        HttpApiPOSTitemsitemId:
          Type: HttpApi
          Properties:
            Path: /items/{itemId}
            Method: POST
            ApiId: !Ref HttpApi
            PayloadFormatVersion: '2.0'
      Environment:
        Variables:
          TABLE_NAME: !Ref Items
          TABLE_ARN: !GetAtt Items.Arn
  deleteItem:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-deleteItem
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: deleteItem
      CodeUri: src/deleteItem
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref Items
      Events:
        HttpApiDELETEitemsitemId:
          Type: HttpApi
          Properties:
            Path: /items/{itemId}
            Method: DELETE
            ApiId: !Ref HttpApi
            PayloadFormatVersion: '2.0'
      Environment:
        Variables:
          TABLE_NAME: !Ref Items
          TABLE_ARN: !GetAtt Items.Arn
  updateItem:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-updateItem
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: updateItem
      CodeUri: src/updateItem
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref Items
      Events:
        HttpApiPUTitemsitemId:
          Type: HttpApi
          Properties:
            Path: /items/{itemId}
            Method: PUT
            ApiId: !Ref HttpApi
            PayloadFormatVersion: '2.0'
      Environment:
        Variables:
          TABLE_NAME: !Ref Items
          TABLE_ARN: !GetAtt Items.Arn
  Items:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      TableName: !Sub ${AWS::StackName}-Items
Parameters:
  StackTagName:
    Type: String
    Description: Stack Name (injected by Stackery at deployment time)
  EnvironmentTagName:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)